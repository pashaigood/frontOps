import path from 'path'
import * as Paths from 'common/constants/paths'
import * as utils from 'common/services/utils'
import HtmlWebpackPlugin from 'html-webpack-plugin'
import { addPlugins, setOutput } from '@webpack-blocks/webpack2'
import _camelCase from 'lodash/camelCase'
import gitRev from 'git-rev-sync'
import EventCallbackWebpackPlugin from 'event-callback-webpack-plugin'

/**
 *
 * @param {Object} options
 * @param {String} options.application
 * @param {Boolean} options.development
 * @param {String} options.number
 * @return {function(): {}}
 */
export default function (options) {
  return () => ({
    ...setOutput({
      filename: utils.isProduction() ? '[name]/index.js?[chunkhash]' : '[name]/index.js',
      path: Paths.OUTPUT,
      publicPath: utils.getPublicHost(),
      chunkFilename: 'chunks/[chunkhash].js'
    })(),
    ...addPlugins(setHtml(options))()
  })
}

function setHtml (options) {
  const defaultLayout = utils.getDefaultLayout()
  const applications = utils.buildEntriesConfig()

  return utils.getEntries(options).reduce((html, entity) => {
    const application = applications[entity]
    const layout = utils.getAppLayout(application.path) || defaultLayout
    const htmlEntries = application.entry ? (
      application.entry instanceof Array ? application.entry : [application.entry]
    ) : [`${application.output}/index.html`]

    htmlEntries.forEach(htmlEntry => {
      const filename = typeof htmlEntry === 'string' ? htmlEntry : htmlEntry.filename
      let branding = {}

      try {
        branding = require(path.join(Paths.COMMON, 'components/theme/constants'))
      } catch (e) {
      }

      html.push(new HtmlWebpackPlugin({
        ...htmlEntry.vars,
        branding,
        inject: true,
        minify: !options.development && {
          'caseSensitive': false,
          'collapseBooleanAttributes': true,
          'collapseInlineTagWhitespace': false,
          'collapseWhitespace': true,
          'conservativeCollapse': false,
          'decodeEntities': true,
          'html5': true,
          'includeAutoGeneratedTags': false,
          'keepClosingSlash': false,
          'minifyCSS': false,
          'minifyJS': false,
          'preserveLineBreaks': false,
          'preventAttributesEscaping': false,
          'processConditionalComments': true,
          'processScripts': ['text/html'],
          'removeAttributeQuotes': true,
          'removeComments': true,
          'removeEmptyAttributes': true,
          'removeEmptyElements': false,
          'removeOptionalTags': true,
          'removeRedundantAttributes': true,
          'removeScriptTypeAttributes': true,
          'removeStyleLinkTypeAttributes': true,
          'removeTagWhitespace': true,
          'sortAttributes': true,
          'sortClassName': true,
          'trimCustomFragments': true,
          'useShortDoctype': true
        },
        // hash: !options.development,
        showErrors: false,
        chunks: [application.output, 'common'],
        filename,
        name: application.name,
        appName: _camelCase('dt ' + application.name),
        basePath: application.output === '.' ? '/' : `/${application.output}/`,
        output: application.output === '.' ? '' : application.output,
        buildNumber: options.number || (options.development ? 'dev' : 'prod'),
        gitRev: options.development ? 'last' : gitRev.short(Paths.CWD),
        template: layout
      }))

      if (!options.development && !options.skipPrerender && application.prerender) {
        html.push(getSnapshot(filename))
      }
    })

    return html
  }, [])
}

function getSnapshot (filename) {
  const snapshot = require('../libs/snapshot')

  return new EventCallbackWebpackPlugin(
    'emit',
    function (compilation, callback) {
      const html = snapshot({
        html: compilation.assets[filename].source(),
        loadAsset: function (src) {
          src = src.replace(/^\//, '')
          if (compilation.assets[src] !== void 0) {
            return compilation.assets[src].source()
          }
        }
      })

      compilation.assets[filename] = {
        source: function () {
          return html
        },
        size: function () {
          return html.length
        }
      }

      callback()
    }
  )
}
